local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Roblox Rivals script", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local Tab = Window:MakeTab({
	Name = "Main",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

Tab:AddLabel("Made By @TimerScripts On YT :D")

local aimbotEnabled = false

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = game:GetService("Workspace").CurrentCamera
local aimingEnabled = false
local nearestPlayer = nil

Tab:AddToggle({
    Name = "Enable Aimbot",
    Default = false,
    Callback = function(Value)
        aimingEnabled = Value
        if not aimingEnabled then
            nearestPlayer = nil
        end
        print("Aimbot " .. (Value and "enabled" or "disabled"))
    end
})

game:GetService("RunService").RenderStepped:Connect(function()
    if aimingEnabled and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
        local closestDistance = math.huge
        nearestPlayer = nil
        
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
                local distance = (LocalPlayer.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    nearestPlayer = player
                end
            end
        end
        
        if nearestPlayer then
            local targetHeadPosition = nearestPlayer.Character.Head.Position
            local cameraPosition = Camera.CFrame.Position
            local directionToTarget = (targetHeadPosition - cameraPosition).unit
            Camera.CFrame = CFrame.lookAt(cameraPosition, targetHeadPosition)
        end
    end
end)
Tab:AddToggle({
    Name = "Enable Hitbox",
    Default = false,
    Callback = function(Value)
        _G.Disabled = not Value
        print("Hitbox modifications " .. (Value and "enabled" or "disabled"))
        if _G.Disabled then
            -- Reset hitbox modifications for all players
            for i, v in next, game:GetService('Players'):GetPlayers() do
                if v.Name ~= game:GetService('Players').LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    pcall(function()
                        v.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)  -- Default size
                        v.Character.HumanoidRootPart.Transparency = 0  -- Default transparency
                        v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")  -- Default color
                        v.Character.HumanoidRootPart.Material = Enum.Material.Plastic  -- Default material
                        v.Character.HumanoidRootPart.CanCollide = true  -- Default collision
                    end)
                end
            end
        end
    end    
})

_G.HeadSize = 17
_G.Disabled = true

game:GetService('RunService').RenderStepped:connect(function()
    if not _G.Disabled then
        for i, v in next, game:GetService('Players'):GetPlayers() do
            if v.Name ~= game:GetService('Players').LocalPlayer.Name and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    v.Character.HumanoidRootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize)
                    v.Character.HumanoidRootPart.Transparency = 0.7
                    v.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                    v.Character.HumanoidRootPart.Material = "Neon"
                    v.Character.HumanoidRootPart.CanCollide = false
                end)
            end
        end
    end
end)
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local espEnabled = false

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local espEnabled = false

Tab:AddToggle({
    Name = "Enable ESP",
    Default = false,
    Callback = function(Value)
        espEnabled = Value

        if espEnabled then
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character then
                    createESP(player)
                end
            end
        else
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Character then
                    local highlight = player.Character:FindFirstChild("ESPHighlight")
                    if highlight then
                        highlight:Destroy()
                    end
                end
            end
        end
    end
})

function createESP(player)
    if player == LocalPlayer or not espEnabled then return end
    local character = player.Character or player.CharacterAdded:Wait()
    if character:FindFirstChild("ESPHighlight") then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.Parent = character
    highlight.Adornee = character
    highlight.FillTransparency = 1
    highlight.OutlineTransparency = 0
    highlight.OutlineColor = Color3.new(1, 0, 0)
end

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if espEnabled then
            createESP(player)
        end
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player.Character then
        createESP(player)
    end
end

Tab:AddLabel("Made By @TimerScripts On YT :D")

local Tab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

Tab:AddLabel("Made By @TimerScripts On YT :D")

local UserInputService = game:GetService("UserInputService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local infiniteJumpEnabled = false

Tab:AddToggle({
    Name = "Enable Infinite Jump",
    Default = false,
    Callback = function(Value)
        infiniteJumpEnabled = Value
        print("Infinite Jump " .. (Value and "enabled" or "disabled"))
    end
})

UserInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled and LocalPlayer and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

local LocalPlayer = game:GetService("Players").LocalPlayer
local walkSpeedEnabled = false
local defaultWalkSpeed = 16

Tab:AddToggle({
    Name = "Enable Super Speed",
    Default = false,
    Callback = function(Value)
        walkSpeedEnabled = Value
        if walkSpeedEnabled then
            LocalPlayer.Character.Humanoid.WalkSpeed = 100
        else
            LocalPlayer.Character.Humanoid.WalkSpeed = defaultWalkSpeed
        end
        print("Walk Speed " .. (Value and "enabled" or "disabled"))
    end
})

Tab:AddLabel("Made by @TimerScripts On YT :D")
